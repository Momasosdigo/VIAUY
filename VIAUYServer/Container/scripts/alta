#!/bin/bash 
#############################
## Zona de auto debugging ##
#[+][+][+][+][+][+][+][+][+][+][+][+]#
handleError() {
    echo -e "\033[1;31m[+]\e[0m\e[0;36m================================================\e[0m\033[1;31m[+]\e[0m"
    echo -e "\033[1;31m[+]\e[0m [ERROR]=> LINEA ""$1""; Script error ""$0""" 
    #                           \__________________________________________/
    #                                               /
    #                                              /
    #       Esta línea muestra el mensaje de error principal. El número de línea 
    #       del error [ $1 ] y el nombre del script [ $0 ] se muestran en el mensaje de error.
    
    echo -e "\033[1;31m[+]\e[0m [Codigo error ""$2"" ]"
    #                           \____________________/
    #                                     /
    #    Se muestra el código de error con el argumento [ $2 ] que causó el problema.
    
    echo -e "\033[1;31m[+]\e[0m\e[0;36m================================================\e[0m\033[1;31m[+]\e[0m"
    exit  1 # Sale del script penas se detecta el error.
}
trap 'handleError ""$LINENO"" ""$?""' ERR
#                 \_________________/
#                          /  
# Cuando el error cae en [ trap ], [ $LINENO ] representa el número de línea donde se produjo
# el error y [ $? ] representa el código de salida del último comando ejecutado. 
# Cuando un comando termina con éxito, [ $? ] es 0, de lo contrario, tendrá un valor 
# diferente y se mostrara el código de error.

trap "echo [x] Que forma más arcaica de salir, se implementaron funciones modernas para ello [x]; exit" SIGINT
# [ SIGINT ]: Proporciona un mensaje de advertencia cuando el usuario intenta
# salir del script usando [ Ctrl+C ] luego finaliza el script con [ exit ].
#[+][+][+][+][+][+][+][+][+][+][+][+]#

#######################
## ALTA DE USUARIOS ##
#####################
function upUser() { clear
    echo -e "\e[0;36m[+]===========================[+]\e[0m"
    echo -e "\e[0;36m|\e[0m\t\033[1;91mAlta de Usuarios\t\e[0;36m|\e[0m"
    echo -e "\e[0;36m[+]===========================[+]\e[0m\n"
    read -r -p "$(echo -e "\e[0;36m[+]\e[0m Nombre de usuario => ")" nameUser
    if ! [[ "$nameUser" =~ ^[a-zA-Z0-9_]+$ ]]; then
    #  \_____________________________________/
    #                  /
    #                 /
    # Se utiliza esa seccion para asegurarse de que el nombre de [ $nameUser ] solo contenga caracteres alfanuméricos y guiones bajos, 
    # evitando que haya otros caracteres especiales o espacios creando un conficto en el servidor.
    # Cabe aclarar que la seccion de [ [a-zA-Z0-9_]+ ] representa un conjunto de caracteres que puede contener letras mayúsculas y minúsculas 
    # (Osea: a-z y A-Z), al igual que números y tambien guiones bajos [ _ ] de querese, de igual manera el símbolo de [ + ] indica 
    # que esta secuencia de caracteres debe estar presente al menos una vez y el simbolo [ $ ] indica el fin dle texto.
        echo -e "\e[0;31m[ERROR]\e[0m El nombre de usuario no es válido, solo letras y numeros"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        return
    fi 

    if id "$nameUser" >/dev/null 2>&1; then
    #                 \_____________/
    #                        |
    #                       |
    #   Se utiliza [ >/dev/null 2>&1 ] para redirigir los mensajes de error del
    #   comando hacia un dispositivo especial en el sistema que descarta la
    #   información. Y asi de esta manera, se suprime la salida y los mensajes
    #   de error del comando en cuestión. Asi nosotros podremos personalizar
    #   los nuestros.
        echo -e "\n\033[4;35mEl usuario especificado ya existe\e[0m"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        clear
        return
    else
        echo "El usuario [ ""$nameUser"" ] no existe ¿Desea que el usuario tenga un grupo principal?"
        read -r -p "[Yy] / [Nn] => " nameUserChoice

        if [[ "$nameUserChoice" == [Yy] ]]; then
            # Crea el usuario y le da un grupo principal que ya exista
            read -r -s -p "$(echo -e "\e[0;36m[+]\e[0m Contraseña del usuario => ")" passUser
            if [[ -z "$passUser" ]]; then
            #  \__________________/
            #           /
            # Se comprueba si la contraseña esta vacia o no, de ser asi 
            # se lanzara el error, esto se hace mediante [ -z ] que comprueba
            # si una cadena esta vacia o no.
                echo -e "\n\033[1;91mLa contraseña no puede estar vacía\e[0m"
                read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
                clear
                return
            fi
            passUser=$(openssl passwd -1 "$passUser")
            #         \____________________________/
            #                       /        
            # Se  utiliza [ openssl ] con la opcion [ -1 ] del comando [ passwd ] 
            # que indica que se generará un hash de contraseña que planteo el usuaro
            # en formato MD5.

            read -r -p "$(echo -e "\n\e[0;36m[+]\e[0m Grupo principal del usuario => ")" primGroup
            sudo useradd -g "$primGroup" -m -d /home/"$nameUser"/ -p "$passUser" -s /bin/bash "$nameUser" && echo -e "\n\e[0;36m[+]\e[0m El usuario [ ""$nameUser"" ] ha sido \033[0;92mexitosamente\033[0m creado \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \033[1;91m No se pudo crear \033[0m el usuario [ ""$nameUser"" ]\e[0;36m[+]\e[0m" 
            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
            clear
            return

        elif [[ "$nameUserChoice" =~ [Nn] ]]; then
            # Simplemente creara el usuario sin un grupo principal
            read -r -s -p "$(echo -e "\e[0;36m[+]\e[0m Contraseña del usuario => ")" passUser
            if [[ -z "$passUser" ]]; then
            #  \__________________/   
            #           /
            # Se comprueba si la contraseña esta vacia o no, de ser asi 
            # se lanzara el error, esto se hace mediante [ -z ] que comprueba
            # si una cadena esta vacia o no.
                echo -e "\n\033[1;91mLa contraseña no puede estar vacía\e[0m"
                read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
                clear
                return
            fi
            passUser=$(openssl passwd -1 "$passUser")
            #         \____________________________/
            #                      /        
            # Se  utiliza [ openssl ] con la opcion [ -1 ] del comando [ passwd ] 
            # que indica que se generará un hash de contraseña que planteo el usuaro
            # en formato MD5.

            sudo useradd -m -d /home/"$nameUser"/ -p "$passUser" -s /bin/bash "$nameUser" && echo -e "\n\e[0;36m[+]\e[0m El usuario [ ""$nameUser"" ] ha sido \033[0;92mexitosamente\033[0m creado \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \033[1;91m No se pudo crear \033[0m el usuario [ ""$nameUser"" ]\e[0;36m[+]\e[0m"
            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
            clear
            return
        else
            echo -e "\n\n\033[4;35mEl usuario especificado no existe\e[0m"
            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
            clear
            return
        fi
    fi
}

#####################
## ALTA DE GRUPOS ##
###################
function upGrup() { clear
    echo -e "\n\e[0;36m[+]=======================[+]\e[0m"
    echo -e "\e[0;36m|\e[0m\033[1;91m\tAlta de Grupo\t    \e[0;36m|\e[0m"
    echo -e "\e[0;36m[+]=======================[+]\e[0m\n"
    read -r -p "$(echo -e "\e[0;36m[+]\e[0m") Nombre de grupo => " nameGrup
    if ! [[ "$nameGrup" =~ ^[a-zA-Z0-9_]+$ ]]; then
        echo -e "\e[0;31m[ERROR]\e[0m El nombre de grupo no es válido, solo letras y numeros"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        clear
        return
    fi 

    # Verificar si el grupo ya existe antes de continuar
    if grep -q -E "^$nameGrup:" /etc/group; then
    #  \__________________________________/
    #                  |
    #                 |
    # El [ "^$nameGrup:"" ] busca una línea que comience con el nombre del grupo seguido de los [ : ]
    # Y símbolo [ ^ ] indica el comienzo de una línea, en donde el nombre del grupo
    # es el valor almacenado en la variable [ $nameGrup ].
        echo -e "\n\033[4;35mEl grupo especificado ya existe\e[0m"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        clear
        return
    else
        echo "El grupo [ ""$nameGrup"" ] no existe ¿Desea crear el grupo?"
        read -r -p "[Yy] / [Nn] => " nameGroupChoice

        if [[ "$nameGroupChoice" =~ [Yy] ]]; then
        #  \______________________________/
        #                 |
        # Se valida la desicion del usuario y en caso de ser aceptado
        # continuara, en cambio al negarce ( [Nn] ) se remplaza
        # por el [ else ].
            sudo groupadd "$nameGrup" && echo -e "\n\e[0;36m[+]\e[0m El grupo [ ""$nameGrup"" ] ha sido \033[0;92mexitosamente\033[0m creado \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \033[1;91m No se pudo crear \033[0m el grupo [ ""$nameGrup"" ]\e[0;36m[+]\e[0m"
            
            echo -e "\n¿Desea agregar algun usuario existente al grupo [ ""$nameGrup"" ]? "
            read -r -p "[Yy] / [Nn] => " addUsersChoice

            if [[ "$addUsersChoice" == [Yy] ]]; then
                read -r -p "$(echo -e "\n\e[0;36m[+]\e[0m") Nombre de usuario que desea agregar => "  nameUser

                if id "$nameUser" >/dev/null 2>&1; then
            #      \____________________________/
            #                    |
            # Esta línea de código verifica si un usuario existe en el sistema
            # Redirige la salida estándar y los mensajes de error del comando id al dispositivo [ /dev/null ] 
            # para que no se muestren en la consola. Si el comando [ id ] tiene éxito, 
            # el bloque de código que sigue a [ then ] se ejecutará sin problemas.
                    sudo usermod -a -G "$nameGrup" "$nameUser" && echo -e "\e[0;36m[+]\e[0m El Usuario [ ""$nameUser"" ] ha sido \033[0;92mexitosamente\033[0m agreagdo al grupo [ ""$nameGrup"" ] \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \e[0m\033[1;91mNo se pudo agregar\033[0m el Usuario [ ""$nameUser"" ] al Grupo [ ""$nameGrup"" ] \e[0;36m[+]\e[0m" 
                    read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
                    clear
                    return
                else
                    echo -e "\033[4;35mEl usuario especificado ya existe\e[0m"
                    read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
                    clear
                    return
                fi
            elif [[ "$addUsersChoice" =~ [Nn] ]]; then
                echo -e "\n\e[0;36m[+]\e[0m El grupo [ ""$nameGrup"" ] ha sido \033[0;92mexitosamente\033[0m creado \e[0;36m[+]\e[0m"
                read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
                clear
                return
            fi
        else
            echo -e "\n\e[0;36m[+]\e[0m\033[1;91m Se denego la creacion\033[0m del grupo [ ""$nameGrup"" ]\e[0;36m [+]\e[0m"
            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
            clear
            return
        fi
    fi
}

while [ "$opUser_Grup" != 3 ]; do
    echo -e "\n\e[0;33m\033[1m[+]=====================[+]\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 1. Dar alta a Usuarios  \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 2. Dar alta a Grupos    \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 3. \033[0;101m\033[1;97mVolver\033[0m               \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m[+]=====================[+]\e[0m"
    read -r -p "$(echo -e "\e[0;33m\033[1m[+]\e[0m") => " opUser_Grup

    case $opUser_Grup in
        1)
            upUser
        ;;

        2)
            upGrup
        ;;

        3)
            unset "$opUser_Grup" #[ unset ] borra la variable en memoria al salir de la funcion.
            unset "$nameGrup"
            unset "$passUser"
            unset "$primGroup"
            unset "$nameUser"
            unset "$addUsersChoice"
            unset "$nameUserChoice"
            unset "$nameGroupChoice"
            ( exec "./main.sh" )
        #   \__________________/
        #            |
    # Con el comando [ exec ] reemplaza al Shell sin crear un nuevo proceso. 
    # Sin embargo, podemos ponerlo en una SubShell, la cual usara 
    # un porcentaje de procesador y ram, para usar esto es 
    # quitando el comando [ exec ] y dejando solo los paréntesis y el path del main:
    # [ ( "./main.sh" ) ].
    # (La segunda opción es buena idea usarla en caso que se dese ejecutar tareas pesadas)
        ;;

        *)
            clear
            echo -e "\n\033[4;35mNo es una opcion lo que intentas\e[0m\n"
            sleep 2s
            clear
        ;;
    esac
done
