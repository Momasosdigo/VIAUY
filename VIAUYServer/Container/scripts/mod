#!/bin/bash 
#############################
## Zona de auto debugging ##
#[+][+][+][+][+][+][+][+][+][+][+][+]#
handleError() {
    echo -e "\033[1;31m[+]\e[0m\e[0;36m================================================\e[0m\033[1;31m[+]\e[0m"
    echo -e "\033[1;31m[+]\e[0m [ERROR]=> LINEA ""$1""; Script error ""$0""" 
    #                           \__________________________________________/
    #                                               /
    #                                              /
    #       Esta línea muestra el mensaje de error principal. El número de línea 
    #       del error [ $1 ] y el nombre del script [ $0 ] se muestran en el mensaje de error.
    
    echo -e "\033[1;31m[+]\e[0m [Codigo error ""$2"" ]"
    #                           \____________________/
    #                                     /
    #    Se muestra el código de error con el argumento [ $2 ] que causó el problema.
    
    echo -e "\033[1;31m[+]\e[0m\e[0;36m================================================\e[0m\033[1;31m[+]\e[0m"
    exit  1 # Sale del script penas se detecta el error.
}
trap 'handleError ""$LINENO"" ""$?""' ERR
#                 \_________________/
#                          /  
# Cuando el error cae en [ trap ], [ $LINENO ] representa el número de línea donde se produjo
# el error y [ $? ] representa el código de salida del último comando ejecutado. 
# Cuando un comando termina con éxito, [ $? ] es 0, de lo contrario, tendrá un valor 
# diferente y se mostrara el código de error.

trap "echo [x] Que forma más arcaica de salir, se implementaron funciones modernas para ello [x]; exit" SIGINT
# [ SIGINT ]: Proporciona un mensaje de advertencia cuando el usuario intenta
# salir del script usando [ Ctrl+C ] luego finaliza el script con [ exit ].
#[+][+][+][+][+][+][+][+][+][+][+][+]#

################################
## MODIFICACION DE USUARIOS ##
#############################
function modUser() { clear
    echo -e "\n\e[0;36m[+]===================================[+]\e[0m"
    echo -e "\e[0;36m|\e[0m\t\033[1;91mModificacion de Usuarios\t\e[0;36m|\e[0m"
    echo -e "\e[0;36m[+]===================================[+]\e[0m\n"
    read -r -p "$(echo -e "\e[0;36m[+]\e[0m") Nombre de usuario a modificar => " userName
    if ! [[ "$userName" =~ ^[a-zA-Z0-9_]+$ ]]; then
    #  \_____________________________________/
    #                  /
    #                 /
    # Se utiliza esa seccion para asegurarse de que el nombre de [ $userName ] solo contenga caracteres alfanuméricos y guiones bajos, 
    # evitando que haya otros caracteres especiales o espacios creando un conficto en el servidor.
    # Cabe aclarar que la seccion de [ [a-zA-Z0-9_]+ ] representa un conjunto de caracteres que puede contener letras mayúsculas y minúsculas 
    # (Osea: a-z y A-Z), al igual que números y tambien guiones bajos [ _ ] de querese, de igual manera el símbolo de [ + ] indica 
    # que esta secuencia de caracteres debe estar presente al menos una vez y el simbolo [ $ ] indica el fin dle texto.
        echo -e "\e[0;31m[ERROR]\e[0m El nombre de grupo no es válido, solo letras y numeros"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        return
    fi

    # Verificar si el usuario existe
    if id "$userName" >/dev/null 2>&1; then
        echo -e "\n\e[0;36m[+] El usuario existe y puede ser modificado [+]\e[0m\n"

        read -r -p "$(echo -e "\n\e[0;36m[+]\e[0m Nuevo nombre de usuario (dejar en blanco para no cambiar) => ")" newUserName
        read -r -s -p "$(echo -e "\e[0;36m[+]\e[0m Nueva contraseña (dejar en blanco para no cambiar) => ")" newPassword
        newPassword=$(openssl passwd -1 "$newPassword")
        if [[ -z "$newPassword" ]]; then
        #  \_____________________/
        #             /
        # Se comprueba si la contraseña esta vacia o no, de ser asi 
        # se lanzara el error, esto se hace mediante [ -z ] que comprueba
        # si una cadena esta vacia o no.
            echo -e "\n\033[1;91mLa contraseña no puede estar vacía\e[0m"
            read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
            clear
            return
        fi

        # Modificar el nombre de usuario si se proporciona uno nuevo
        if [ -n "$newUserName" ]; then
            sudo usermod -l "$newUserName" "$userName" && echo -e "\n\e[0;36m[+]\e[0m El nombre del usuario [ ""$userName"" ] ha sido \033[0;92mexitosamente\033[0m modificada a [ ""$newUserName"" ]\e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \e[0m\033[1;91mNo se pudo modificar\033[0m al usuario [ ""$userName"" ] \e[0;36m[+]\e[0m\n"
        fi

        # Modificar la contraseña si se proporciona una nueva
        if [ -n "$newPassword" ]; then
            echo "$newUserName:$newPassword" | sudo chpasswd && echo -e "\e[0;36m[+]\e[0m La contraseña del usuario [ ""$newUserName"" ] ha sido \033[0;92mexitosamente\033[0m modificada \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \e[0m\033[1;91mNo se pudo modificar\033[0m al usuario [ ""$newUserName"" ] \e[0;36m[+]\e[0m\n"
        #        \__________________________________________/
        #                              |
        # El comando [ "$newUserName:$newPassword" | sudo chpasswd ] en este caso es para  
        # cambiar la contraseña del usuario utilizando [ chpasswd ] con permisos sudo 
        fi

        echo "Desea agregar a un grupo secundario y primario al usuario?"
        read -r -p "[Yy] / [Nn] => " nameUserChoice

        if [[ "$nameUserChoice" == [Yy] ]]; then
            read -r -p "$(echo -e "\n\e[0;36m[+]\e[0m Agregar a un grupo primario existente (dejar en blanco para no cambiar) => ")" primary_group
            read -r -p "$(echo -e "\e[0;36m[+]\e[0m Agregar a un grupo secundario existente (dejar en blanco para no cambiar) => ")" secondary_group

            # Agregar a un grupo primario existente si se proporciona
            if [ -n "$primary_group" ]; then
                sudo usermod -a -g "$primary_group" "$userName"
                echo -e "\e[0;36m[+]\e[0m El usuario [ ""$userName"" ] ha sido \033[0;92mexitosamente\033[0m agregado al grupo primario [ ""$primary_group"" ] \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \e[0m\033[1;91mNo se pudo agregar\033[0m al usuario [ ""$userName"" ] al grupo primario [ ""$primary_group"" ] \e[0;36m[+]\e[0m"
            fi

            # Agregar a un grupo secundario existente si se proporciona
            if [ -n "$secondary_group" ]; then
                sudo usermod -a -G "$secondary_group" "$userName" && echo -e "\e[0;36m[+]\e[0m El usuario [ ""$userName"" ] ha sido \033[0;92mexitosamente\033[0m agregado al grupo secundario [ ""$secondary_group"" ] \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \e[0m\033[1;91mNo se pudo agregar\033[0m al usuario [ ""$userName"" ] al grupo secundario [ ""$secondary_group"" ] \e[0;36m[+]\e[0m"
            fi

        elif [[ "$nameUserChoice" == [Nn] ]]; then
            echo -e "\n\e[0;36m[+]\e[0m\033[1;91m No se agregaran usarios\033[0m a los grupos \e[0;36m[+]\e[0m"
        else
            clear
            echo -e "\n\033[4;35mNo es una opcion lo que intentas\e[0m\n"
            sleep 2s
            clear
        fi

        echo -e "\n¿Desea dar de baja a un grupo primario y secundario?"
        read -r -p "[Yy] / [Nn] => " nameUserChoice 
        if [[ "$nameUserChoice" == [Yy] ]]; then
            read -r -p "$(echo -e "\n\e[0;36m[+]\e[0m Dar de baja de un grupo principal existente (dejar en blanco para no cambiar) => ")" delete_primary_group
            read -r -p "$(echo -e "\e[0;36m[+]\e[0m Dar de baja de un grupo secundario existente (dejar en blanco para no cambiar) => ")" delete_secondary_group
            
            # Dar de baja de un grupo principal existente si se proporciona
            if [ -n "$delete_primary_group" ]; then
                sudo deluser "$userName" "$delete_primary_group"
                echo -e "\e[0;36m[+]\e[0m El usuario [ ""$userName"" ] ha sido \033[0;92mexitosamente\033[0m dado de baja del grupo principal [ ""$delete_primary_group"" ] \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \033[1;91mNo se ha podido eliminar\033[0m al usuario [ ""$userName"" ] del grupo principal [ ""$delete_primary_group"" ] \e[0;36m[+]\e[0m"
            fi

            # Dar de baja de un grupo secundario existente si se proporciona
            if [ -n "$delete_secondary_group" ]; then
                sudo deluser "$userName" "$delete_secondary_group"
                echo -e "\e[0;36m[+]\e[0m El usuario [ ""$userName"" ] ha sido \033[0;92mexitosamente\033[0m dado de baja del grupo secundario [ ""$delete_secondary_group"" ] \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \033[1;91mNo se ha podido eliminar\033[0m al usuario [ ""$userName"" ] del grupo secundario [ ""$delete_secondary_group"" ] \e[0;36m[+]\e[0m"
            fi
        elif [[ "$nameUserChoice" == [Nn] ]]; then
            echo -e "\n\e[0;36m[+]\e[0m\033[1;91m No se dara de baja\033[0m ningun grupo \e[0;36m[+]\e[0m\033[1;91m"
        else
            clear
            echo -e "\n\033[4;35mNo es una opcion lo que intentas\e[0m\n"
            sleep 2s
            clear
        fi
    fi
}

#############################
## MODIFICACION DE GRUPOS ##
###########################
function modGroup() { clear
    echo -e "\n\e[0;36m[+]===========================[+]\e[0m"
    echo -e "\e[0;36m|\e[0m     \033[1;91mModificacion de Grupos\t\e[0;36m|\e[0m"
    echo -e "\e[0;36m[+]===========================[+]\e[0m\n"
    read -r -p "$(echo -e "\e[0;36m[+]\e[0m") Nombre de grupo a modificar => " groupName
    if ! [[ "$groupName" =~ ^[a-zA-Z0-9_]+$ ]]; then
    #  \_____________________________________/
    #                  /
    #                 /
    # Se utiliza esa seccion para asegurarse de que el nombre de [ $groupName ] solo contenga caracteres alfanuméricos y guiones bajos, 
    # evitando que haya otros caracteres especiales o espacios creando un conficto en el servidor.
    # Cabe aclarar que la seccion de [ [a-zA-Z0-9_]+ ] representa un conjunto de caracteres que puede contener letras mayúsculas y minúsculas 
    # (Osea: a-z y A-Z), al igual que números y tambien guiones bajos [ _ ] de querese, de igual manera el símbolo de [ + ] indica 
    # que esta secuencia de caracteres debe estar presente al menos una vez y el simbolo [ $ ] indica el fin dle texto.
        echo -e "\e[0;31m[ERROR]\e[0m El nombre de grupo no es válido, solo letras y numeros"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        return
    fi

    # Verificar si el grupo existe
    if grep -q -E "^$groupName:" /etc/group; then

        echo -e "\n\e[0;36m[+] El grupo existe y puede ser modificado [+]\e[0m\n"
        read -r -p "$(echo -e "\e[0;36m[+]\e[0m Nuevo nombre del grupo (dejar en blanco para no cambiar) => ")" newGroupName

        # Modificar el nombre del grupo si se proporciona uno nuevo
        if [ -n "$newGroupName" ]; then
            sudo groupmod -n "$newGroupName" "$groupName"
            echo -e "\e[0;36m[+]\e[0m El nombre del grupo [ ""$groupName"" ] ha sido \033[0;92mexitosamente\033[0m modificada \e[0;36m[+]\e[0m" || echo -e "\e[0;36m[+]\e[0m \033[46mNo se pudo modificar\033[0m el nombre del grupo [ ""$groupName"" ]\e[0;36m[+]\e[0m\n"
        fi

        echo -e "\n¿Desea agregar usurios a un grupo secundario y primario?"
        read -r -p "[Yy] / [Nn] => " nameUserChoice

        # Agregar a un grupo primario existente si se proporciona
        if [[ "$nameUserChoice" == [Yy] ]]; then
            read -r -p "$(echo -e "\n\e[0;36m[+]\e[0m Agregar usuarios al grupo primario (separados por espacios en caso de ser mas) => ")" addUsersPrimaryGroup
            read -r -p "$(echo -e "\e[0;36m[+]\e[0m Agregar usuarios al grupo secundario (separados por espacios en caso de ser mas) => ")" addUsersSecondGroup

            # Agregar usuarios al grupo primario si se proporcionan
            if [ -n "$addUsersPrimaryGroup" ]; then
                for user in $addUsersPrimaryGroup; do
                    sudo usermod -a -g "$newGroupName" "$user" && echo -e "\e[0;36m[+]\e[0m Los usuarios [ ""$user"" ] han sido \033[0;92mexitosamente\033[0m agregados al grupo [ ""$newGroupName"" ]\e[0;36m[+]\e[0m\n" || echo -e "\e[0;36m[+]\e[0m \033[46mNo se pudo agregar\033[0m al usuario [ ""$newGroupName"" ] al grupo [ ""$newGroupName"" ]\e[0;36m[+]\e[0m\n"
                done
            fi

            # Agregar usuarios al grupo secundario si se proporcionan
            if [ -n "$addUsersSecondGroup" ]; then
                for user in $addUsersSecondGroup; do
                    sudo usermod -a -G "$newGroupName" "$user" && echo -e "\e[0;36m[+]\e[0m Los usuarios [ ""$user"" ] han sido \033[0;92mexitosamente\033[0m agregados al grupo [ ""$newGroupName"" ]\e[0;36m[+]\e[0m\n" || echo -e "\e[0;36m[+]\e[0m \033[46mNo se pudo agregar\033[0m al usuario [ ""$newGroupName"" ] al grupo [ ""$newGroupName"" ]\e[0;36m[+]\e[0m\n"
                done
            fi
        elif [[ "$nameUserChoice" == [Nn] ]]; then
            echo -e "\n\e[0;36m[+]\e[0m\033[1;91m No se agregaran usarios\033[0m a los grupos \e[0;36m[+]\e[0m"
        else
            clear
            echo -e "\n\033[4;35mNo es una opcion lo que intentas\e[0m\n"
            sleep 2s
            clear
        fi

        echo -e "\n¿Desea dar de baja a un grupo primario y secundario?"
        read -r -p "[Yy] / [Nn] => " nameUserChoice 

        if [[ "$nameUserChoice" == [Yy] ]]; then
            read -r -p "$(echo -e "\n\e[0;36m[+]\e[0m Eliminar usuarios del grupo primario (separados por espacios en caso de ser mas) => ")" removeUsersPrimaryGroup
            read -r -p "$(echo -e "\e[0;36m[+]\e[0m Eliminar usuarios del grupo secundario (separados por espacios en caso de ser mas) => ")" removeUsersSecondGroup

            # Eliminar usuarios del grupo primario si se proporcionan
            if [ -n "$removeUsersPrimaryGroup" ]; then
                for user in $removeUsersPrimaryGroup; do
                    sudo deluser "$user" "$newGroupName" && echo -e "\e[0;36m[+]\e[0m El usuario [ ""$user"" ] ha sido \033[0;92mexitosamente\033[0m removido del grupo primario [ ""$newGroupName"" ]\e[0;36m[+]\e[0m" || echo -e "\e[0;36m[+]\e[0m \033[46mNo se pudo remover\033[0m al usuario [ ""$newGroupName"" ] del grupo primario [ ""$newGroupName"" ]\e[0;36m[+]\e[0m\n"
                done
            fi

            # Eliminar usuarios del grupo secundario si se proporcionan
            if [ -n "$removeUsersSecondGroup" ]; then
                for user in $removeUsersSecondGroup; do
                    sudo deluser "$user" "$newGroupName" && echo -e "\e[0;36m[+]\e[0m El usuario [ ""$user"" ] ha sido \033[0;92mexitosamente\033[0m removido del grupo secundario [ ""$newGroupName"" ]\e[0;36m[+]\e[0m" || echo -e "\e[0;36m[+]\e[0m \033[46mNo se pudo remover\033[0m al usuario [ ""$newGroupName"" ] del grupo secundario [ ""$newGroupName"" ]\e[0;36m[+]\e[0m\n"
                done
            fi

        elif [[ "$nameUserChoice" == [Nn] ]]; then
            echo -e "\n\e[0;36m[+]\e[0m\033[1;91m No se dara de baja\033[0m ningun grupo \e[0;36m[+]\e[0m\033[1;91m"
        else
            clear
            echo -e "\n\033[4;35mNo es una opcion lo que intentas\e[0m\n"
            sleep 2s
            clear
        fi
    fi
}

while [ "$opUser_Grup" != 3 ]; do
    echo -e "\n\e[0;33m\033[1m[+]=======================[+]\e[0m"
    echo -e "\e[0;33m\033[1m[+]\e[0m 1. Modificar Usuarios \e[0;33m\033[1m[+]\e[0m"
    echo -e "\e[0;33m\033[1m[+]\e[0m 2. Modificar Grupos   \e[0;33m\033[1m[+]\e[0m"
    echo -e "\e[0;33m\033[1m[+]\e[0m 3. \033[0;101m\033[1;97mVolver\033[0m\t\t  \e[0;33m\033[1m[+]\e[0m"
    echo -e "\e[0;33m\033[1m[+]=======================[+]\e[0m"
    read -r -p "=> " opUser_Grup
    echo

    case "${opUser_Grup}" in
        1)
            modUser
        ;;

        2)
            modGroup
        ;;

        3)
            unset "$opUser_Grup" #[ unset ] borra la variable en memoria al salir de la funcion. 
            unset "$groupName"
            unset "$user"
            unset "$newGroupName"
            unset "$newUserName"
            unset "$addUsersPrimaryGroup"
            unset "$addUsersSecondGroup"
            unset "$removeUsersPrimaryGroup"
            unset "$removeUsersSecondGroup"
            ( exec "./main.sh" )
        #    \________________/
        #            |
    # Con el comando [ exec ] reemplaza al Shell sin crear un nuevo proceso. 
    # Sin embargo, podemos ponerlo en una SubShell, la cual usara 
    # un porcentaje de procesador y ram, para usar esto es 
    # quitando el comando [ exec ] y dejando solo los paréntesis y el path del main:
    # [ ( "./main.sh" ) ].
    # (La segunda opción es buena idea usarla en caso que se dese ejecutar tareas pesadas)
        ;;

        *)
            clear
            echo -e "\n\033[4;35mNo es una opcion lo que intentas\e[0m"
            sleep 2s
            clear
        ;;
    esac
done
