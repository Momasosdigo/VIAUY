#!/bin/bash
clear
#############################
## Zona de auto debugging ##
#[+][+][+][+][+][+][+][+][+][+][+][+]#
handleError() {
    echo -e "\033[1;31m[+]\e[0m\e[0;36m============================================\e[0m\033[1;31m[+]\e[0m"
    echo -e "\033[1;31m[+]\e[0m [ERROR]=> LINEA $1; Script error $0 \033[1;31m[+]\e[0m"
    echo -e "\033[1;31m[+]\e[0m [Codigo error $2 ]                        \033[1;31m[+]\e[0m"
    echo -e "\033[1;31m[+]\e[0m\e[0;36m============================================\e[0m\033[1;31m[+]\e[0m"
    exit 1
}
trap 'handleError $LINENO $?' ERR
trap "echo [x] Que forma mas arcaica de salir, se implementaron funciones modernas para ello [x]; exit" SIGINT
#[+][+][+][+][+][+][+][+][+][+][+][+]#

#######################
## BAJA DE USUARIOS ##
#####################
function down_User() {
    echo -e "\n\e[0;36m[+]===========================[+]\e[0m"
    echo -e "\e[0;36m|\e[0m\t\033[1;91mBaja de Usuarios\t\e[0;36m|\e[0m"
    echo -e "\e[0;36m[+]===========================[+]\e[0m\n"
    read -r -p "$(echo -e "\e[0;36m[+]\e[0m") Nombre de usuario => " down_User

    # Comprobar si el usuario existe
    if id "$down_User" >/dev/null 2>&1; then
    #                 \___________________/
    #                           |
    # Esta línea de código verifica si un usuario existe en el sistema
    # Redirige la salida estándar y los mensajes de error del comando id al dispositivo [ /dev/null ] 
    # para que no se muestren en la consola. Si el comando id tiene éxito, 
    # el bloque de código que sigue a [ then ] se ejecutará sin problemas

        echo -e "\n\e[0;36m[+]\e[0m El usuario [ ""$down_User"" ] existe en el sistema"
        echo "¿Desea eliminar al usuario [ ""$down_User"" ] y su directorio de usuario?" 
        read -r -p "[Yy] / [Nn] => " delete_user

        if [[ "$delete_user" == [Yy] ]]; then
    #        \______________________/
    #                   |
    # Se valida la desicion del usuario y en caso de ser aceptado
    # continuara, la no utilizacion de una negacion ( [Nn] ) se remplaza
    # por el [ else ] el cual cumple el rol de negacion haciendo mas facil
    # el trabajo.
            sudo userdel -r "$down_User"
            echo -e "\e[0;36m[+]\e[0m El usuario [ ""$down_User"" ] y su directorio han sido eliminados exitosamente \e[0;36m[+]\e[0m"
            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
            clear && [ "$opUser_Grup" = true ]
        else
            echo "No se ha eliminado al usuario [ ""$down_User"" ] ni su directorio"
            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
            clear && [ "$opUser_Grup" = true ]
        fi

    else
        echo -e "\n\n\033[4;35mEl usuario especificado no existe\e[0m"
        read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
        clear && [ "$opUser_Grup" = true ]
    fi
}

#####################
## BAJA DE GRUPOS ##
###################
function down_Grup() {
    echo -e "\n\e[0;36m[+]===================================[+]\e[0m"
    echo -e "\e[0;36m|\e[0m\t\033[1;91mBaja de Grupo\t\e[0;36m|\e[0m"
    echo -e "\e[0;36m[+]===================================[+]\e[0m\n"
    read -r -p "$(echo -e "\e[0;36m[+]\e[0m") Nombre de grupo => " down_Grup

    # Comprobar si el grupo existe
    if grep -q -E "^$down_Grup:" /etc/group; then # Inicio [ if 1 ]
    #  \________________________________________/
    #                      |
    #                      |
    # El [ "^$groupname:"" ] busca una línea que comience con el nombre del grupo seguido de los [ : ] 
    # Y símbolo [ ^ ] indica el comienzo de una línea, en donde el nombre del grupo
    # es el valor almacenado en la variable [ $groupname ] 
        echo -e "\n\e[0;36m[+]\e[0m El grupo [ ""$down_Grup"" ] existe en el sistema"

        # Obtener la lista de usuarios en el grupo
        user_list=$(grep -E "^$down_Grup:" /etc/group | cut -d ":" -f4)
    #               \________________________________________________/
    #                                       |
    #                                       |
    # Para poder eliminar el grupo de manera segura se hace un filtrado 
    # primero de los usuarios en el y asi asegurarse que se vaciara moderadamente
    # antes de eliminarlo completamente del sistema

        if [ -n "$user_list" ]; then # Inicio [ if 2 ]
            echo "Cantidad de Usuarios en el grupo [ ""$down_Grup"" ]: $user_list"
            echo "¿Desea eliminar el grupo [ ""$down_Grup"" ] y sacar a todos los usuarios del grupo?" 
            read -r -p "[Yy] / [Nn] => " delete_group

            if [[ "$delete_group" == [Yy] ]]; then # Inicio [ if 3 ]
                # Retira a los usuarios del grupo antes de eliminarlo
                for user in $user_list; do
            #   \________________________/
            #              |
            #              |
            # Se recore la lista de usuarios en el grupo y se van eliminando 
            # correspondientemente del grupo siendo en la linea 66 - 71 en la cual
            # se vuelve a comprobar si se ha vaciado

                    sudo deluser "$user" "$down_Grup"
                    echo -e "\e[0;36m[+]\e[0m Se a eliminado \033[46mexitosamente\033[0m al usuario [ ""$user"" ] del grupo [ ""$down_Grup"" ]\e[0;36m[+]\e[0m\n"
                done

                # Verificar si el grupo está vacío después de retirar a los usuarios
                if grep -q -E "^$down_Grup:" /etc/group; then # Inicio [ if 4 ]
                    echo -e "\e[0;36m[+]\e[0m El grupo [ ""$down_Grup"" ] aun cuenta con usuarios, no sera eliminado\e[0;36m[+]\e[0m"
                else
                    sudo delgroup "$down_Grup"
                    echo -e "\e[0;36m[+]\e[0m Se a eliminado \033[46mexitosamente\033[0m el grupo [ ""$down_Grup"" ]\e[0;36m[+]\e[0m"
                fi # Final del [ if 4 ]

            else
                echo -e "\e[0;36m[+]\e[0m No se ha podido eliminar el grupo [ ""$down_Grup"" ]\e[0;36m[+]\e[0m"
            fi # Final del [ if 3 ]

        else
            echo -e "\033[4;35mNo hay usuarios en el grupo [ ""$down_Grup"" ]\e[0m"
        fi # Final del [ if 2 ]

    else
        echo -e "\033[4;35mEl grupo especificado no existe\e[0m"
    fi # Final del [ if 1 ]
}

while [ "$opUser_Grup" != 3 ]; do
    echo -e "\n\e[0;33m\033[1m[+]=====================[+]\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 1. Dar baja a Usuarios  \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 2. Dar baja a Grupos    \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 3. \033[0;101m\033[1;97mVolver\033[0m               \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m[+]=====================[+]\e[0m"
    read -r -p "$(echo -e "\e[0;33m\033[1m[+]\e[0m") => " opUser_Grup
    echo

    case "${opUser_Grup}" in
        1)
            down_User
        ;;

        2)
            down_Grup
        ;;

        3)
            unset "$opUser_Grup" #[ unset ] borra la variable en memoria al salir de la funcion.
            unset "$down_Grup"
            unset "$down_User"
            unset "$delete_user"
            unset "$delete_group"
            unset "$user_list"
            ( exec "./main.sh" )
        #    \________________/
        #            |
    # Con el comando [ exec ] reemplaza al Shell sin crear un nuevo proceso. 
    # Sin embargo, podemos ponerlo en una SubShell, la cual usara 
    # un porcentaje de procesador y ram, para usar esto es 
    # quitando el comando [ exec ] y dejando solo los paréntesis y el path del main:
    # [ ( "./main.sh" ) ].
    # (La segunda opción es buena idea usarla en caso que se dese ejecutar tareas pesadas)
        ;;

        *)
            clear
            echo
            echo -e "\033[4;35mNo es una opcion lo que intentas\e[0m"
            echo
            sleep 2s
            clear
            [ "${opUser_Grup}" = true ]
        ;;
    esac
done