#!/bin/bash

#############################
## Zona de auto debugging ##
#[+][+][+][+][+][+][+][+][+][+][+][+]#
handleError() {
    echo -e "\033[1;31m[+]\e[0m\e[0;36m================================================\e[0m\033[1;31m[+]\e[0m"
    echo -e "\033[1;31m[+]\e[0m [ERROR]=> LINEA ""$1""; Script error ""$0""" 
    #                           \__________________________________________/
    #                                               /
    #                                              /
    #       Esta línea muestra el mensaje de error principal. El número de línea 
    #       del error [ $1 ] y el nombre del script [ $0 ] se muestran en el mensaje de error.
    
    echo -e "\033[1;31m[+]\e[0m [Codigo error ""$2"" ]"
    #                           \____________________/
    #                                     /
    #    Se muestra el código de error con el argumento [ $2 ] que causó el problema.
    
    echo -e "\033[1;31m[+]\e[0m\e[0;36m================================================\e[0m\033[1;31m[+]\e[0m"
    exit  1 # Sale del script penas se detecta el error.
}
trap 'handleError ""$LINENO"" ""$?""' ERR
#                 \_________________/
#                          /  
# Cuando el error cae en [ trap ], [ $LINENO ] representa el número de línea donde se produjo
# el error y [ $? ] representa el código de salida del último comando ejecutado. 
# Cuando un comando termina con éxito, [ $? ] es 0, de lo contrario, tendrá un valor 
# diferente y se mostrara el código de error.

trap "echo [x] Que forma más arcaica de salir, se implementaron funciones modernas para ello [x]; exit" SIGINT
# [ SIGINT ]: Proporciona un mensaje de advertencia cuando el usuario intenta
# salir del script usando [ Ctrl+C ] luego finaliza el script con [ exit ].
#[+][+][+][+][+][+][+][+][+][+][+][+]#

#######################
## BAJA DE USUARIOS ##
#####################
function removedUsers() { clear
    echo -e "\n\e[0;36m[+]===========================[+]\e[0m"
    echo -e "\e[0;36m|\e[0m\t\033[1;91mBaja de Usuarios\t\e[0;36m|\e[0m"
    echo -e "\e[0;36m[+]===========================[+]\e[0m\n"
    read -r -p "$(echo -e "\e[0;36m[+]\e[0m") Nombre de usuario => " removedUsers
    if ! [[ "$removedUsers" =~ ^[a-zA-Z0-9_]+$ ]]; then
        echo -e "\e[0;31m[ERROR]\e[0m El nombre de usuario no es válido, solo letras y numeros"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        return
    fi

    # Comprobar si el usuario existe
    if id "$removedUsers" >/dev/null 2>&1; then
    #                     \______________/
    #                            |
    # Esta línea de código verifica si un usuario existe en el sistema
    # Redirige la salida estándar y los mensajes de error del comando id al dispositivo [ /dev/null ] 
    # para que no se muestren en la consola. Si el comando id tiene éxito, 
    # el bloque de código que sigue a [ then ] se ejecutará sin problemas.

        echo -e "\n\e[0;36m[+]\e[0m El usuario [ ""$removedUsers"" ] existe en el sistema \e[0;36m[+]\e[0m"
        echo "¿Desea eliminar al usuario [ ""$removedUsers"" ] y su directorio de usuario?" 
        read -r -p "[Yy] / [Nn] => " deleteUser

        if [[ "$deleteUser" == [Yy] ]]; then
    #        \______________________/
    #                   |
    # Se valida la desicion del usuario y en caso de ser aceptado
    # continuara, la no utilizacion de una negacion ( [Nn] ) se remplaza
    # por el [ else ] el cual cumple el rol de negacion haciendo mas facil
    # el trabajo.
            sudo userdel -r "$removedUsers" && echo -e "\n\e[0;36m[+]\e[0m El usuario [ ""$removedUsers"" ] y su directorio han sido eliminados \033[0;92mexitosamente\033[0m \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m \e[0m\033[1;91mNo se pudo eliminar\033[0m el usuario [ ""$removedUsers"" ]\e[0;36m[+]\e[0m" 
            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
            clear
            return
        else
            echo "No se eliminara al usuario [ ""$removedUsers"" ] ni su directorio"
            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
            clear
            return
        fi
    else
        echo -e "\n\n\033[4;35mEl usuario especificado no existe\e[0m"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        clear
        return
    fi
}

#####################
## BAJA DE GRUPOS ##
###################
function removedGroup() { clear
    echo -e "\n\e[0;36m[+]=======================[+]\e[0m"
    echo -e "\e[0;36m|\e[0m\t\033[1;91mBaja de Grupo\t    \e[0;36m|\e[0m"
    echo -e "\e[0;36m[+]=======================[+]\e[0m\n"
    read -r -p "$(echo -e "\e[0;36m[+]\e[0m") Nombre de grupo => " removedGroup
    if ! [[ "$removedGroup" =~ ^[a-zA-Z0-9_]+$ ]]; then
        echo -e "\e[0;31m[ERROR]\e[0m El nombre de grupo no es válido, solo letras y numeros"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        return
    fi

    # Verificar si el grupo existe
    if grep -q -E "^$removedGroup:" /etc/group; then
        echo -e "$(echo -e "\e[0;36m[+]\e[0m") El grupo [ ""$removedGroup"" ] \033[0;92mexiste en el sistema\033[0m"

        # Obtener la lista de usuarios en el grupo
        userList=$(grep -E "^$removedGroup:" /etc/group | cut -d ":" -f4)
    #              \_____________________________________________/
    #                                    |
    #                                   |
    # Para poder eliminar el grupo de manera segura se hace un filtrado 
    # primero de los usuarios en el y asi asegurarse que se vaciara moderadamente
    # antes de eliminarlo completamente del sistema


        # Comprobar si hay usuarios en el grupo
        if [ -n "$userList" ]; then
    #   \_________________________/
    #               |
    #              |
    # Si la variable [ userList ] contiene algún valor, entonces la condición se evalúa como verdadera y 
    # se ejecuta el bloque de código dentro del [ if ]. En este caso, se muestra la lista de usuarios mas adelante
    # y se realiza la pregunta al usuario sobre si desea eliminar el grupo o no

            echo -e "\n\e[0;36m[+]\e[0m Usuarios existentes en el grupo [ ""$removedGroup"" ]: $userList"
            echo -e "\e[0;36m[+]\e[0m ¿Desea eliminar el grupo [ ""$removedGroup"" ] y sacar a todos los usuarios de este?" 
            read -r -p "[Yy] / [Nn] => " deleteGroup

            if [[ "$deleteGroup" == [Yy] ]]; then
                # Retirar a los usuarios del grupo
                sudo gpasswd -d "$userList" "$removedGroup" >/dev/null 2>&1 && echo -e "\e[0;36m[+]\e[0m Se ha eliminado \033[0;92mexitosamente\033[0m al usuario [ ""$userList"" ] del grupo [ ""$removedGroup"" ] \e[0;36m[+]\e[0m\n" || echo -e "\e[0;36m[+]\e[0m \e[0m\033[1;91mNo se pudo eliminar\033[0m al usuario [ ""$userList"" ] del grupo [ ""$removedGroup"" ]\e[0;36m[+] \e[0m\n"
                #                                           \_____________/
                #                                                  |
                #                                                 |
                #          Se utiliza [ >/dev/null 2>&1 ] para redirigir los mensajes de error del
                #          comando hacia un dispositivo especial en el sistema que descarta la
                #          información. Y asi de esta manera, se suprime la salida y los mensajes
                #          de error del comando en cuestión. Asi nosotros podremos personalizar
                #          los nuestros

                sudo groupdel -f "$removedGroup" && echo -e "\n\e[0;36m[+]\e[0m Se ha eliminado \033[0;92mexitosamente\033[0m el grupo [ ""$removedGroup"" ] \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m No se ha podido eliminar el grupo [ ""$removedGroup"" ] \e[0;36m[+]\e[0m"
                read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
                clear
                return
            fi
        else
            # No hay usuarios en el grupo, entonces eliminar el grupo directamente
            sudo groupdel -f "$removedGroup"
            echo -e "\n\e[0;36m[+]\e[0m Se ha eliminado \033[0;92mexitosamente\033[0m el grupo [ ""$removedGroup"" ] \e[0;36m[+]\e[0m"
            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..."
            clear
            return
        fi
    else
        echo -e "\n\033[4;35mEl grupo especificado no existe\e[0m"
        read -n1 -p "Presione cualquier tecla para [ VOLVER ]..."
        clear
        return
    fi
}

while [ "$opUser_Grup" != 3 ]; do
    echo -e "\n\e[0;33m\033[1m[+]=====================[+]\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 1. Dar baja a Usuarios  \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 2. Dar baja a Grupos    \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 3. \033[0;101m\033[1;97mVolver\033[0m               \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m[+]=====================[+]\e[0m"
    read -r -p "$(echo -e "\e[0;33m\033[1m[+]\e[0m") => " opUser_Grup
    echo

    case "${opUser_Grup}" in
        1)
            removedUsers
        ;;

        2)
            removedGroup
        ;;

        3)
            unset "$opUser_Grup" #[ unset ] borra la variable en memoria al salir de la funcion.
            unset "$removedGroup"
            unset "$removedUsers"
            unset "$deleteUser"
            unset "$deleteGroup"
            unset "$userList"
            ( exec "./main.sh" )
        #    \________________/
        #            |
    # Con el comando [ exec ] reemplaza al Shell sin crear un nuevo proceso. 
    # Sin embargo, podemos ponerlo en una SubShell, la cual usara 
    # un porcentaje de procesador y ram, para usar esto es 
    # quitando el comando [ exec ] y dejando solo los paréntesis y el path del main:
    # [ ( "./main.sh" ) ].
    # (La segunda opción es buena idea usarla en caso que se dese ejecutar tareas pesadas)
        ;;

        *)
            clear
            echo -e "\n\033[4;35mNo es una opcion lo que intentas\e[0m\n"
            sleep 2s
            clear
        ;;
    esac
done
