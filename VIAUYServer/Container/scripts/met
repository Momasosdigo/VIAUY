#!/bin/bash

#############################
## Zona de auto debugging ##
#[+][+][+][+][+][+][+][+][+][+][+][+]#
handleError() {
    echo -e "\033[1;31m[+]\e[0m\e[0;36m================================================\e[0m\033[1;31m[+]\e[0m"
    echo -e "\033[1;31m[+]\e[0m [ERROR]=> LINEA ""$1""; Script error ""$0"""
    #                           \__________________________________________/
    #                                               /
    #                                              /
    #       Esta línea muestra el mensaje de error principal. El número de línea
    #       del error [ $1 ] y el nombre del script [ $0 ] se muestran en el mensaje de error.

    echo -e "\033[1;31m[+]\e[0m [Codigo error ""$2"" ]"
    #                           \____________________/
    #                                     /
    #    Se muestra el código de error con el argumento [ $2 ] que causó el problema.

    echo -e "\033[1;31m[+]\e[0m\e[0;36m================================================\e[0m\033[1;31m[+]\e[0m"
    exit  1 # Sale del script penas se detecta el error.
}
trap 'handleError ""$LINENO"" ""$?""' ERR
#                 \_________________/
#                          /
# Cuando el error cae en [ trap ], [ $LINENO ] representa el número de línea donde se produjo
# el error y [ $? ] representa el código de salida del último comando ejecutado.
# Cuando un comando termina con éxito, [ $? ] es 0, de lo contrario, tendrá un valor
# diferente y se mostrara el código de error.

trap "echo [x] Que forma más arcaica de salir, se implementaron funciones modernas para ello [x]; exit" SIGINT
# [ SIGINT ]: Proporciona un mensaje de advertencia cuando el usuario intenta
# salir del script usando [ Ctrl+C ] luego finaliza el script con [ exit ].
#[+][+][+][+][+][+][+][+][+][+][+][+]#

function iYd() { clear
    while [ "$op_iYd" != 4 ]; do
        echo -e "\n\e[0;33m\033[1m[+]===================================[+]\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m 1. Comprobar \e[1;32m[ PID ]\e[0m\t\t\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m 2. Cerrar procesos \e[1;32m[ NECESARIO PID ] \e[0m \e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m 3. \033[0;101mVolver\033[0m\t\t\t\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m[+]===================================[+]\e[0m"
        read -r -p "$(echo -e "\e[0;33m\033[1m[+]\e[0m") => " op_iYd

        case $op_iYd in 
            1)
                echo && top && echo
                read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." op_iYd
                [ "$op_iYd" = true ]
                clear
            ;;

            2) sleep 1s
                echo -e "\n\033[1;31m[+]\e[0m Para cerrar procesos necesitas su \e[1;32m[ PID ]\e[0m (Process Indentifiers)"
                read -r -p "$(echo -e "\e[0;33m\033[1m[+]\e[0m") => " pid

                if [ "$pid" -le 1116 ]; then
                    echo -e "\e[1;35m\033[4mLa integridad del sistema se veria comprometida\e[0m\033[0m"
                    #Algo a tener en cuenta es que todo los parámetros que están por debajo de 1116
                    #Son procesos que afectan directamente a la Terminal y el sistema, siendo así
                    #que los procesos 387, 792 y 1031 rompen el sistema.
                else
                    kill "$pid" && echo -e "\n\e[0;36m[+]\e[0m Se ha cerrado \033[0;92mexitosamente\033[0m el proceso [ ""$pid"" ] \e[0;36m[+]\e[0m" || echo -e "\n\e[0;36m[+]\e[0m No se ha \033[1;31mpodido cerrar\e[0m el proceso [ ""$pid"" ] \e[0;36m[+]\e[0m"

                fi
            ;;


            3)
                unset "$op_iYd"
                unset "$pid"
                unset "$tar"
                ( exec "./main.sh" )
            ;;

            *)
                clear
                echo -e "\n\033[4;35mNo es una opcion lo que intentas\e[0m\n"
                sleep 2s
                clear
                ( exec "./main.sh" )
            ;;
        esac
   done
}

function sql() { clear
    while [ "$op_sql" != 6 ]; do
        echo -e "\n\e[0;33m\033[1m[+]===========================[+]\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m\t     \033[1;91m\033[5m\033[3mMySQL\033[0m\t\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m\t\t\t\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  1. Comprobar el servicio SQL\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  2. Iniciar MySQL\t\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  3. Activar el servicio SQL\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  4. Reiniciar MySQL\t\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  5. Detener el servicio SQL\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  6. \033[0;101m\033[1;97mVolver\033[0m\t\t\t\e[0;33m\033[1m|\e[0m"
        echo -e "\e[0;33m\033[1m[+]===========================[+]\e[0m"
        read -r -p "$(echo -e "\e[0;33m\033[1m[+]\e[0m") => " op_sql 
        echo 

        case "$op_sql" in
            1)
                systemctl status mysqld
                echo
                read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." op_sql
                [ "$op_sql" = true ]
                clear
            ;;

            2)
                sudo mysql -u root
            ;;

            3)
                systemctl start mysqld
                read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." op_sql
                [ "$op_sql" = true ]
                clear
            ;;

            4) 
                systemctl restart mysqld
                read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." op_sql
                [ "$op_sql" = true ]
                clear
            ;;

            5)
                systemctl stop mysqld
                read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." op_sql
                [ "$op_sql" = true ]
                clear
            ;;

            6)
                unset "$op_sql"
                clear
                ( exec "./main.sh" ) 
            ;;

            *)
                clear
                echo
                echo -e "\033[4;35mNo es una opcion lo que intentas\e[0m"
                echo
                sleep 2s
                clear
                ( exec "./met.sh" )
            ;;
        esac
    done
}

function tarea() { clear
    while [ "$tar" != 6 ]; do
        echo -e "\n\e[0;33m\033[1m[+]=================================================[+]\e[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  1. Mostrar procesos generales   \e[1;34m[ VISTA SIMPLE ]\e[0m   \e[0;33m\033[1m|\e[0m\033[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  2. Mostrar procesos por usuario \e[1;34m[ VISTA SIMPLE ]\e[0m   \e[0;33m\033[1m|\e[0m\033[0m"
        echo -e "\e[0;33m\033[1m|\e[0m\t\t\t\t\t\t      \e[0;33m\033[1m|\e[0m\033[0m"
        echo -e "\e[0;33m\033[1m|\e[0m\t\e[0;32m\033[1m\033[4m\033[3m[ Vista avanzada del administrador ]\033[0m\t      \e[0;33m\033[1m|\e[0m\033[0m"
        echo -e "\e[0;33m\033[1m|\e[0m\t\t\t\t\t\t      \e[0;33m\033[1m|\e[0m\033[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  3. Mostrar procesos generales   \033[5m\e[1;31m[ VISTA AVANZADA ]\e[0m \e[0;33m\033[1m|\e[0m\033[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  4. Mostrar procesos por usuario \033[5m\e[1;31m[ VISTA AVANZADA ]\e[0m \e[0;33m\033[1m|\e[0m\033[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  5. Filtrar por procesos\t\t\t      \e[0;33m\033[1m|\e[0m\033[0m"
        echo -e "\e[0;33m\033[1m|\e[0m  6. \033[0;101m\033[1;97mVolver\033[0m\t\t\t\t\t      \e[0;33m\033[1m|\e[0m\033[0m"
        echo -e "\e[0;33m\033[1m[+]=================================================[+]\e[0m"
        read -r -p "$(echo -e "\e[0;33m\033[1m[+]\e[0m") => " tar
        echo

        case $tar in 
            1) sleep 1s
                echo
                top
                echo
                read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." tar
                clear && source met 
                clear
            ;;

            2) sleep 1s
                echo -e "\e[1;36m Ingrese el nombre del \033[4musuario\033[0m \e[1;36mque desea ver sus procesos \e[0m"
                read -r -p "=> " name
                top -u "$name"
                read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." tar
                ( exec "./met.sh" )
            ;;

            3) sleep 1s
                echo
                htop -t
                clear
            ;;

            4) sleep 1s
                echo -e "\e[1;36m Ingrese el nombre del \033[4musuario\033[0m \e[1;36mque desea ver sus procesos \e[0m"
                read -r -p "=> " name
                htop -u "$name"
                clear
            ;;

            5)
               while [ "$tar2" != 6 ]; do
                    clear
                    echo -e "\n\e[0;33m\033[1m[+]=========================================[+]\e[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m\t      \033[1m\033[3mFiltro de tareas\033[0m\t\t      \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m\t\t\t\t\t      \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m 1. Mostrar uso de CPU   \e[1;34m[ VISTA SIMPLE ]\e[0m    \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m 2. Mostrar uso de RAM   \e[1;34m[ VISTA SIMPLE ]\e[0m    \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m 3. Mostrar uso de Disco \e[1;34m[ VISTA SIMPLE ]\e[0m    \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m\t\t\t\t\t      \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m        \e[0;32m\033[1m\033[4m\033[3m[ Vista de filtro avanzada ]\033[0m         \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m\t\t\t\t\t      \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m 4. Mostrar uso de CPU   \033[5m\e[1;31m[ VISTA AVANZADA ]\e[0m  \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m 5. Mostrar uso de RAM   \033[5m\e[1;31m[ VISTA AVANZADA ]\e[0m  \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m|\e[0m 6. \033[0;101m\033[1;97mVolver\033[0m\t\t\t\t      \e[0;33m\033[1m|\033[0m"
                    echo -e "\e[0;33m\033[1m[+]=========================================[+]\e[0m"
                    read -r -p "$(echo -e "\e[0;33m\033[1m[+]\e[0m") => " tar2
                    echo

                    case $tar2 in
                        #Vista simple
                        1)
                            top -o %CPU
                            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." tar2
                            [ "$tar2" = true ]
                            clear
                        ;;

                        2)
                            top -o %MEM
                            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." tar2
                            [ "$tar2" = true ]
                            clear
                        ;;

                        3)
                            sudo df -h
                            read -n1 -p "Presione cualquier tecla para [ CONTINUAR ]..." tar2
                            [ "$tar2" = true ]
                            clear
                        ;;

                        #Vista avanzada
                        4)
                            htop --filter %CPU
                        ;;

                        5)
                            htop --filter %MEM
                        ;;

                        6)
                            read -r -p "Presione enter para [ VOLVER ]..." tar
                            clear 
                            ( exec "./main.sh" )
                        ;;

                        *)
                            clear
                            echo
                            echo -e "\e[1;35m\033[4mNo es una opcion lo que intentas\e[0m\033[0m"
                            echo
                            sleep 2s
                            clear
                        ;;
                    esac #Final case 5
                done #Final while 5
            ;;

            6)
                unset "$tar"
                unset "$tar2"
                clear 
                ( exec "./main.sh" )
            ;;

            *)
                clear
                echo
                echo -e "\033[4;35mNo es una opcion lo que intentas\e[0m"
                echo
                sleep 2s
                clear
                ( exec "./main.sh" )
            ;;
        esac
    done
}

while [ "$tar" != 4 ]; do
    echo -e "\n\e[0;33m\033[1m[+]============================[+]\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 1. Iniciar & detener procesos  \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 2. MySQL\t\t\t \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 3. Tareas\t\t\t \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m|\e[0m 4. \033[0;101m\033[1;97mVolver\033[0m\t\t\t \e[0;33m\033[1m|\e[0m"
    echo -e "\e[0;33m\033[1m[+]============================[+]\e[0m"
    read -r -p "$(echo -e "\e[0;33m\033[1m[+]\e[0m") => " tar

    case "${tar}" in
        1)
            iYd
        ;;

        2)
            sql
        ;;

        3)
            tarea
        ;;

        4)
            unset "$op_iYd" #[ unset ] borra la variable en memoria al salir de la funcion.
            unset "$pid"
            unset "$$tar2"
            unset "$$tar"
            ( exec "./main.sh" )
        #    \________________/
        #            |
    # Con el comando [ exec ] reemplaza al Shell sin crear un nuevo proceso. 
    # Sin embargo, podemos ponerlo en una SubShell, la cual usara 
    # un porcentaje de procesador y ram, para usar esto es 
    # quitando el comando [ exec ] y dejando solo los paréntesis y el path del main:
    # [ ( "./main.sh" ) ].
    # (La segunda opción es buena idea usarla en caso que se dese ejecutar tareas pesadas)
        ;;

        *)
            clear
            echo -e "\n\033[4;35mNo es una opcion lo que intentas\e[0m\n"
            sleep 2s
            clear
        ;;
    esac
done
